Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    alias(libs.plugins.android.application)\n    alias(libs.plugins.kotlin.android)\n    alias(libs.plugins.kotlin.compose)\n    alias(libs.plugins.kotlin.kapt)\n}\n\nandroid {\n    namespace = \"com.example.cs501_project\"\n    compileSdk = 35\n\n    composeOptions {\n        kotlinCompilerExtensionVersion = \"1.3.2\"\n    }\n    defaultConfig {\n        applicationId = \"com.example.cs501_project\"\n        minSdk = 33\n        targetSdk = 35\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n    kotlinOptions {\n        jvmTarget = \"11\"\n    }\n    buildFeatures {\n        compose = true\n    }\n\n    kapt {\n        correctErrorTypes = true // useful for annotation processing with Room\n        useBuildCache = true\n        includeCompileClasspath = false\n    }\n\n}\n\ndependencies {\n    implementation(\"com.mapbox.maps:android:11.11.0\")\n    implementation(libs.android)\n    implementation(libs.maps.compose)\n    implementation(libs.accompanist.permissions)\n    implementation(libs.play.services.location)\n    implementation(libs.androidx.lifecycle.viewmodel.compose)\n    implementation(libs.retrofit)\n    implementation(libs.converter.moshi)\n    implementation(libs.moshi)\n    implementation(libs.kotlinx.coroutines.android)\n    implementation(libs.androidx.core.ktx)\n    implementation(libs.support.annotations)\n    implementation(libs.androidx.annotation)\n    implementation(libs.androidx.storage)\n    implementation(libs.androidx.navigation.compose)\n    implementation(libs.retrofit)\n    implementation(libs.converter.gson)\n    implementation(libs.gson)\n    implementation(libs.play.services.maps)\n    kapt(libs.androidx.room.compiler)\n    implementation(libs.androidx.lifecycle.viewmodel.compose)\n    implementation(libs.androidx.lifecycle.viewmodel.ktx)\n    implementation(libs.androidx.lifecycle.runtime.ktx)\n    implementation(libs.androidx.activity.compose)\n    implementation(platform(libs.androidx.compose.bom))\n    implementation(libs.androidx.ui)\n    implementation(libs.androidx.ui.graphics)\n    implementation(libs.androidx.ui.tooling.preview)\n    implementation(libs.androidx.lifecycle.viewmodel.ktx)\n    implementation(libs.androidx.material3)\n    implementation(libs.androidx.room.common)\n    implementation(libs.androidx.room.ktx)\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.androidx.junit)\n    androidTestImplementation(libs.androidx.espresso.core)\n    androidTestImplementation(platform(libs.androidx.compose.bom))\n    androidTestImplementation(libs.androidx.ui.test.junit4)\n    debugImplementation(libs.androidx.ui.tooling)\n    debugImplementation(libs.androidx.ui.test.manifest)\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 412024bc041d2a2d98634ae08a1a1458e56f08b2)
+++ b/app/build.gradle.kts	(date 1744596966610)
@@ -51,7 +51,6 @@
 }
 
 dependencies {
-    implementation("com.mapbox.maps:android:11.11.0")
     implementation(libs.android)
     implementation(libs.maps.compose)
     implementation(libs.accompanist.permissions)
Index: app/src/main/java/com/example/cs501_project/ui/LocationScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.cs501_project.ui\n\nimport android.Manifest\nimport android.content.pm.PackageManager\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.OutlinedCard\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.core.content.ContextCompat\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.example.cs501_project.viewmodel.LocationViewModel\nimport com.mapbox.geojson.Point\nimport com.mapbox.maps.CameraOptions\nimport com.mapbox.maps.MapView\nimport com.mapbox.maps.Style\n\n// location screen will display all location-related information and list nearby historical places\n@Composable\nfun LocationScreen(locationViewModel: LocationViewModel = viewModel()) {\n    val context = LocalContext.current\n\n    // state variables to track whether or not location permissions have been granted\n    var hasFineLocationPermission by remember {\n        mutableStateOf(\n            ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED\n        )\n    }\n    var hasCoarseLocationPermission by remember {\n        mutableStateOf(\n            ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED\n        )\n    }\n\n    // observes state flows from the viewmodel and updates ui when a new location is received\n    val historicalPlaces by locationViewModel.historicalPlaces.collectAsState()\n    val currentLocation by locationViewModel.currentLocation.collectAsState()\n    val currentCity by locationViewModel.currentCity.collectAsState()\n\n    // used to launch the system's permission request dialogue\n    val locationPermissionLauncher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.RequestMultiplePermissions(),\n        onResult = { permissions ->\n            // checking to see if we have fine location and coarse location permissions\n            hasFineLocationPermission = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false\n            hasCoarseLocationPermission = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false\n        }\n    )\n\n    // if the permissions are not yet granted, will use LaunchedEffect to ask for them\n    LaunchedEffect(Unit) {\n        if (!hasFineLocationPermission || !hasCoarseLocationPermission) {\n            locationPermissionLauncher.launch(\n                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION)\n            )\n        }\n    }\n\n    // displaying the historical places\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        if (currentLocation != null) {\n            Text(\n                text = \"$currentCity\",\n                fontSize = 30.sp,\n                fontWeight = FontWeight.Bold,\n                modifier = Modifier\n                    .padding(16.dp),\n                textAlign = TextAlign.Center,\n            )\n\n            Spacer(modifier = Modifier.height(16.dp))\n            AndroidView(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(300.dp)\n                    .padding(bottom = 16.dp),\n                factory = { context ->\n                    MapView(context).apply {\n                        mapboxMap.loadStyleUri(Style.MAPBOX_STREETS) {\n                            mapboxMap.setCamera(\n                                CameraOptions.Builder()\n                                    .center(\n                                        Point.fromLngLat(\n                                            currentLocation!!.longitude,\n                                            currentLocation!!.latitude\n                                        )\n                                    )\n                                    .zoom(12.0)\n                                    .build()\n                            )\n                        }\n                    }\n                }\n            )\n\n\n            Text(\n                text = \"Explore these places next... \",\n                modifier = Modifier\n                    .padding(16.dp),\n                textAlign = TextAlign.Center,\n            )\n            if (historicalPlaces.isNotEmpty()) {\n                LazyColumn {\n                    items(historicalPlaces) { place ->\n                        OutlinedCard(\n                            colors = CardDefaults.cardColors(\n                                containerColor = MaterialTheme.colorScheme.surface,\n                            ),\n                            border = BorderStroke(1.dp, Color.Black),\n                            modifier = Modifier\n                                .fillMaxSize()\n                                .padding(16.dp)\n                        ) {\n                            Text(\n                                text = place.title,\n                                modifier = Modifier\n                                    .padding(16.dp),\n                                textAlign = TextAlign.Center,\n                            )\n                        }\n                    }\n                }\n            } else {\n                Text(\"No historical places found nearby.\")\n            }\n        } else if (!hasFineLocationPermission || !hasCoarseLocationPermission) {\n            Text(\"Location permissions not granted.\")\n        } else {\n            Text(\"Getting location...\")\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cs501_project/ui/LocationScreen.kt b/app/src/main/java/com/example/cs501_project/ui/LocationScreen.kt
--- a/app/src/main/java/com/example/cs501_project/ui/LocationScreen.kt	(revision 412024bc041d2a2d98634ae08a1a1458e56f08b2)
+++ b/app/src/main/java/com/example/cs501_project/ui/LocationScreen.kt	(date 1744596420025)
@@ -41,7 +41,6 @@
 import com.mapbox.maps.CameraOptions
 import com.mapbox.maps.MapView
 import com.mapbox.maps.Style
-
 // location screen will display all location-related information and list nearby historical places
 @Composable
 fun LocationScreen(locationViewModel: LocationViewModel = viewModel()) {
@@ -102,6 +101,7 @@
             )
 
             Spacer(modifier = Modifier.height(16.dp))
+
             AndroidView(
                 modifier = Modifier
                     .fillMaxWidth()
